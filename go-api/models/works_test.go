// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorks(t *testing.T) {
	t.Parallel()

	query := Works()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Works().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Work exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkExists to return true, but got false.")
	}
}

func testWorksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workFound, err := FindWork(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if workFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Works().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Works().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workOne := &Work{}
	workTwo := &Work{}
	if err = randomize.Struct(seed, workOne, workDBTypes, false, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}
	if err = randomize.Struct(seed, workTwo, workDBTypes, false, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Works().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workOne := &Work{}
	workTwo := &Work{}
	if err = randomize.Struct(seed, workOne, workDBTypes, false, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}
	if err = randomize.Struct(seed, workTwo, workDBTypes, false, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func workAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Work) error {
	*o = Work{}
	return nil
}

func testWorksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Work{}
	o := &Work{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Work object: %s", err)
	}

	AddWorkHook(boil.BeforeInsertHook, workBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workBeforeInsertHooks = []WorkHook{}

	AddWorkHook(boil.AfterInsertHook, workAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workAfterInsertHooks = []WorkHook{}

	AddWorkHook(boil.AfterSelectHook, workAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workAfterSelectHooks = []WorkHook{}

	AddWorkHook(boil.BeforeUpdateHook, workBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workBeforeUpdateHooks = []WorkHook{}

	AddWorkHook(boil.AfterUpdateHook, workAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workAfterUpdateHooks = []WorkHook{}

	AddWorkHook(boil.BeforeDeleteHook, workBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workBeforeDeleteHooks = []WorkHook{}

	AddWorkHook(boil.AfterDeleteHook, workAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workAfterDeleteHooks = []WorkHook{}

	AddWorkHook(boil.BeforeUpsertHook, workBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workBeforeUpsertHooks = []WorkHook{}

	AddWorkHook(boil.AfterUpsertHook, workAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workAfterUpsertHooks = []WorkHook{}
}

func testWorksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Works().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workDBTypes = map[string]string{`ID`: `uuid`, `Title`: `text`, `Description`: `text`, `Tags`: `ARRAYcharacter varying`, `Meta`: `jsonb`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testWorksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workAllColumns) == len(workPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workDBTypes, true, workPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workAllColumns) == len(workPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Work{}
	if err = randomize.Struct(seed, o, workDBTypes, true, workColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workDBTypes, true, workPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workAllColumns, workPrimaryKeyColumns) {
		fields = workAllColumns
	} else {
		fields = strmangle.SetComplement(
			workAllColumns,
			workPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorksUpsert(t *testing.T) {
	t.Parallel()

	if len(workAllColumns) == len(workPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Work{}
	if err = randomize.Struct(seed, &o, workDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Work: %s", err)
	}

	count, err := Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workDBTypes, false, workPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Work struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Work: %s", err)
	}

	count, err = Works().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
